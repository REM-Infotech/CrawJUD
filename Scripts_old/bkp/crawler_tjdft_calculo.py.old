# Selenium Imports
from selenium.webdriver.common.print_page_options import PrintOptions
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium import webdriver
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver import Keys
#Scripts Import
from Scripts.Tools.ChromeDriver import ChromeDriverCrawJUD
from Scripts.Tools.StartStop_Notify import SetStatus
from Scripts.Tools.PrintLogs import printtext as prt
#from Scripts.Tools.get_url_socket import url_socket
from Scripts.Tools.MakeTemplate import MakeXlsx

from datetime import datetime
import pytz
from clear import clear
from time import sleep
from PyPDF2 import *

import platform
import openpyxl
import pathlib
import logging
import base64
import os
from typing import Type

class CrawlerCalculoTJ:

    def initialize_crawler(self, arguments_bot: dict, status: str):
        
        #[self.arguments_bot,pid,self.arguments_bot,"texto",self.namefile]
        print(status)
        
        self.pid = pid = arguments_bot["pid"]
        
        #PROCURA POR ARQUIVOS .xlsx
        for root, dirs, files in os.walk(f"Temp/{pid}"):
            for file in files:
                if ".xlsx" in file : 
                    input_file = os.path.join("Temp", pid, file)
                    break
        
        #Temp\pid
        output_dir_path = os.path.join(pathlib.Path(input_file).parent.resolve())
        
        self.path = ''
        self.nomearquivo = self.namefile = ''
        self.nomearquivo_sucess = ''
        self.arguments_bot = arguments_bot                #arguments_bot{"pid", 'user', 'bot'}
        self.input_file = input_file            #temp\pid\file
        self.output_dir_path = output_dir_path
        self.prt = prt(self.pid)  #Temp\pid
        
        #TRANSFORMA CAMINHO NUMA LISTA DE NOMES ["temp", "pid", "file"]
        if platform.system() == "Windows":
            self.input_file = self.input_file.split("\\")[-1]
            
        elif platform.system() == "Linux":
            self.input_file = self.input_file.split("/")[-1]
            
        
        #RETORNARÁ VALOR 500 OU LISTA [driver, wait] SENDO ["webdriver.chrome" , "WebDriverWait(driver,20)"]
        args = ChromeDriverCrawJUD().DriverLaunch(pid=pid, out_dir=output_dir_path)
        
        try:
            if args == 500:
                self.prt.print_log('error', 'Erro ao inicializar Robô')
                status = [self.arguments_bot['user'], pid, self.arguments_bot['bot'], 'Falha ao iniciar', self.namefile]
                SetStatus().botstop(status)
                return args
            else:
                clear()
                
                self.prt.print_log('log', 'Robô inicializado!')
                
                #   "webdriver.chrome", "WebDriverWait(driver,20)"
                self.driver: Type[WebDriver] = args[0]
                self.wait: Type[WebDriverWait] = args[1]
                
                status = [self.arguments_bot['user'], pid, self.arguments_bot['bot'], 'Em Execução', self.input_file]
                SetStatus().botstart(status)
                
                #ENVIA PRO BANCO DE DADOS A QUANTIDADE DE INFORMAÇÕES A SER TRATADA
                try:
                    ws = openpyxl.load_workbook(self.input_file).active
                    self.rows = rows = str(ws.max_row)
                    info_row = SetStatus().send_total_rows(rows, pid)
                except Exception as e:
                    logging.error(f'Exception: {e}', exc_info=True)
                    self.message = f"Não foi possivel carregar planilha de processos. System Error: {e}"
                    self.prt.print_log(self.pid, "log", message)
                return 200
        finally:
            self.read_xlsx(driver, wait, pid, ws)

    def read_xlsx(self, ws):
        
        try:
            self.prt.print_log('log', 'Criando planilha de output')
            namefile = f"Sucessos - PID {self.pid} {datetime.now(pytz.timezone('Etc/GMT+4')).strftime('%d-%m-%y')}.xlsx"
            namefile_erro = f"Erros - PID {self.pid} {datetime.now(pytz.timezone('Etc/GMT+4')).strftime('%d-%m-%y')}.xlsx"
            self.path = f"{self.output_dir_path}/{namefile}"
            self.path_erro = f"{self.output_dir_path}/{namefile_erro}"
            MakeXlsx().make_output('tjdf_calculo_sucesso', self.path, None)
            MakeXlsx().make_output('tjdf_calculo_erro', self.path_erro, None)
            if make_output is not True or make_output_erro is not True:
                raise Exception("Erro ao criar arquivo")
            
        except Exception as e:
            logging.error(f'Exception: {e}', exc_info=True)
            self.prt.print_log('error', 'Erro ao gerar planilha de output')
            status = [self.arguments_bot['user'], self.pid, self.arguments_bot['bot'], 'Falha ao iniciar', 'Sem arquivo']
            SetStatus().botstart(status)
            return
        
        cookie = 0
        for processo in range(3, ws.max_row+1): #LER TODAS LINHAS COM NÚMERO DE PROCESSOS
            i = 0 
            
            self.message = "Acessando Página de cálculo"
            self.prt.print_log(self.pid, "log", message)
            self.driver.get("https://www.tjdft.jus.br/servicos/atualizacao-monetaria-1/calculo")
            
            if cookie == 0: #PROCURA BOTÃO DE COOKIE APENAS UMA VEZ
                try:
                    ciente:WebElement = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[4]/div/button")))
                    sleep(1)
                    ciente.click()
                    cookie +=1
                except Exception as e:
                    logging.error(f'Exception: {e}', exc_info=True)
                
            if ws.cell(processo, 1).value == None: #VERIFICA SE PRIMEIRA COLUNA ESTÁ VAZIA
                pass
            else:
                self.numproc = ws.cell(processo, 1).value
                for dado in range(1, ws.max_column+1): #LER TODA LINHA DO PROCESSO
                    cell_obj = ws.cell(processo, dado).value
                    
                    if cell_obj is not None and cell_obj != '' and cell_obj != ' ': #VERIFICA SE A CÉLULA ESTÁ VAZIA
                        
                        try:
                            self.row = processo-2
                            self.get_calcular(driver, wait, cell_obj, i) #ENVIA DADOS PRO SITE
                        except Exception as e:
                            logging.error(f'Exception: {e}', exc_info=True)
                            self.message = "Erro ao tratar informações da planilha"
                            self.prt.print_log(self.pid, "error", message, i-1)
                    i+=1
                
                data = [ws.cell(processo, 1).value, ws.cell(processo, 2).value] #numero do processo , requerente
                self.finalizar_execucao(driver, wait, data)
                
            if processo == ws.max_row:
                self.prt.print_log(self.pid, 'log', 'Fim da execução', self.rows)
                status = [self.arguments_bot['user'], self.pid, self.arguments_bot['bot'], 'Finalizado']
                SetStatus().botstop(status)
                
    def get_calcular(self, cell_obj, i):
        #IDs        Formulario 3                            Correção Monetaria 4                                                Valores Devidos 3                  Multa 2                    Honorarios de Sucumbência 4                                                                  Multa art. 475          Honorarios do Cumprimento de setença 4                                              Custas 2
        site_id = ("num_processo","requerente","requerido","data_calculo","juros_partir","juros_data","juros_percent_variavel","data-0","valor-0","multa_percent","multa_data","multa_valor","honor_sucumb_percent","honor_sucumb_data", "honor_sucumb_valor","honor_sucumb_juros_partir","multa475_exec_percent","honor_exec_percent","honor_exec_data","honor_exec_valor","honor_exec_juros_partir","custas-data-0","custas-valor-0")
        titulos = ("Número do processo", "Requerente", "Requerido", "Correção monetária - Atualizado até", "Correção monetária - Juros incidentes", "Correção monetária - Data", "Correção monetária - Percentual", "Valor devido - Data", "Valor devido", "Multa - Percentual de multa", "Multa - Data", "Multa - Valor base", "Honorários de sucumbência - Percentual", "Honorários de sucumbência - Data", "Honorários de sucumbência - Valor base", "Honorários de sucumbência - Juros a partir da data", "Multa Art. 475-J", "Honorários do cumprimento de sentença - Percentual", "Honorários do cumprimento de sentença - Data", "Honorários do cumprimento de sentença - Valor base", "Honorários do cumprimento de sentença - Juros a partir da data", "Custas - Data custas", "Custas - Valor base")
        
        try:
            site = self.driver.find_element(By.ID, site_id[i])
            disable = self.driver.find_element(By.ID, site_id[i]).get_property("disabled")
            if disable == False:
                #DETECTANDO SE DADO NÃO É STRING
                if isinstance(cell_obj, datetime): #DATA
                    cell_obj = cell_obj.strftime("%d/%m/%Y")
                if isinstance(cell_obj, int): #NUMERO INTEIRO
                    cell_obj = str(cell_obj)
                if isinstance(cell_obj, float): #NUMERO RACIONAL
                    cell_obj = "{:.2f}".format(cell_obj).replace(".", ",")
                        
                #SE ELEMENTO DO SITE FOR SELECT
                if site.tag_name == "select":
                    Select(site).select_by_visible_text(cell_obj)
                else:#OU FOR TEXT BOX
                    site.clear()
                    site.send_keys(cell_obj)
                    site.send_keys(Keys.TAB)    
                self.message = f"enviado {titulos[i]} = {cell_obj}"
                self.prt.print_log(self.pid, "log", message, self.row)
            else:
                self.message = f"falha {titulos[i]}, verificar se o valor {cell_obj} na tabela está correto"
                self.prt.print_log(self.pid, "error", message, self.row)
        except Exception as e:
            logging.error(f'Exception: {e}', exc_info=True)
            self.message = f"Erro ao informar{titulos[i]} = {site_id[i]} = {cell_obj}"
            
            args = [self.numproc, message]
            
            self.append_error_on_output(args)
            
            self.prt.print_log(self.pid, "error", message, self.row)
            return

    def finalizar_execucao(self, data):

        try:
            self.driver.find_element(By.ID,"calcular").click()
        except:
            self.message = "Não foi possivel emitir calculo"
            self.prt.print_log(self.pid, "error", message, self.row)
            return   
        
        try:
            xpath_valor_calculo = '//*[@id="acessorios"]/tbody/tr[3]/td[2]/strong'
            valor_calculado:WebElement = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, xpath_valor_calculo))).text
            
        except:
            
            try:
                table_valor_calc = 'table[class="grid listing"][summary="Valores calculados dos acessórios da atualização monetária"]'
                wait5:WebElement = WebDriverWait(driver, 5, 0.01).until
                tr_valor_calculado = wait5(EC.presence_of_element_located((By.CSS_SELECTOR, table_valor_calc))).find_elements(By.TAG_NAME, "tr")[-1]
                valor_calculado = tr_valor_calculado.find_elements(By.TAG_NAME, "td")[-1].find_element(By.TAG_NAME, "strong").text
            
            except Exception as e:
                    
                logging.error(f'Exception: {e}', exc_info=True)
                valor_calculado = '' 
        
        
        print_options = PrintOptions()
        print_options.orientation = 'portrait'
        pdf = driver.print_page(print_options)
        pdf_bytes = base64.b64decode(pdf)
        
        name_pdf = f"CALCULO - {data[0]} - {data[1]} - {self.pid}.pdf"
        
        #SALVA PAGINA COMO PDF         #Temp\pid\CALCULO - 0000000.00.2024.0.00.0000 - Fulano.pdf
        if platform.system() == "Windows":
            path_pdf = f"{self.output_dir_path}\\{name_pdf}"
        elif platform.system() == "Linux":
            path_pdf = f"{self.output_dir_path}/{name_pdf}"

        with open(path_pdf, "wb") as file:
            file.write(pdf_bytes)
        
        #data = [numprocesso, #Temp\pid\CALCULO - 0000000.00.2024.0.00.0000 - Fulano.pdf, ???]
        data = [data[0], valor_calculado, name_pdf]
        
        self.append_process_on_output(data)
                      
    def append_process_on_output(self, data):
        #Temp\pid\PID [pid] 27-03-2024.xlsx
        output_filename = self.path

        wb = openpyxl.load_workbook(filename=output_filename)
        sheet = wb.active
        sheet.append(data)
        wb.save(output_filename)

        self.message = f"Calculo do processo nº{data[0]} gerado com sucesso!"
        self.prt.print_log(self.pid, "log", message, self.row)


    def append_error_on_output(self, args):
        
       
        output_filename = self.path_erro

        wb = openpyxl.load_workbook(filename=output_filename)
        sheet = wb.active

        sheet.append(args)
        wb.save(output_filename)
            
        


# #CAMINHO ALTERADO PRA %TEMP%
# os.chdir(r"C:\Users\IVAN~1.JUN\AppData\Local")
# #pid = pasta em %temp%AAA
# arguments_bot = {"pid" : "AAA","user" : "ivan","bot" : "calculo"}
# status = [arguments_bot['user'], arguments_bot["pid"], arguments_bot['bot'],"iniciando bot de teste",["temp","pid","file"]]
# variavel = CrawlerCalculoTJ()
# variavel.initialize_crawler(arguments_bot,status)