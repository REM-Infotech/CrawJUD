[tool.poetry]
name = "crawjud-bots"
version = "8.0.0"
description = "CrawJUD API para execução de bots"
authors = ["Robotz213 <nicholasazs213@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
flask-socketio = "^5.4.1"
flask = "^3.1.0"
flask-mysqldb = "^2.0.0"
flask-mail = "^0.10.0"
selenium = "^4.26.1"
webdriver-manager = "^4.0.2"
google-cloud-storage = "^2.18.2"
google-auth = "^2.36.0"
openpyxl = "^3.1.5"
pypdf = "^5.1.0"
tqdm = "^4.67.0"
clear = "^2.0.0"
psutil = "^6.1.0"
bcrypt = "^4.2.0"
python-socketio = "^5.11.4"
flask-sqlalchemy = "^3.1.1"
pywinauto = "^0.6.8"
pillow = "^11.0.0"
python-docx = "^1.1.2"
pymupdf = "^1.24.13"
pandas = "^2.2.3"
flask-talisman = "^1.1.0"
pyyaml = "^6.0.2"
termcolor = "^2.5.0"
psycopg2 = "^2.9.10"
rich = "^13.9.4"
deep-translator = "^1.11.4"
chrome-version = "^0.3.1"
inquirer = "^3.4.0"
findmyip = "^1.2.0"
aiofiles = "^24.1.0"
watchdog = "^6.0.0"
gitpython = "^3.1.43"
pygithub = "^2.5.0"
eventlet = "^0.39.0"
openai = "^1.60.1"
redis = "^5.2.0"
redis-flask = "0.0.2"
tenacity = "^9.0.0"
memory-profiler = "^0.61.0"
matplotlib = "^3.10.0"
celery = "^5.4.0"
tornado = "^6.4.2"
python-dotenv-vault = "^0.6.4"
cryptography = "41.0.7"
python-dotenv = "0.21.1"
flake8-bugbear = "^24.12.12"


[tool.poetry.group.dev.dependencies]
ruff = "^0.9.2"
pre-commit = "^4.0.1"
debugpy = "^1.8.9"
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
yamllint = "^1.35.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
# skips = ["B404", "B603", "B105", "B605", "B607"]

[tool.ruff]
preview = true
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
]

# Same as Black.
line-length = 120
indent-width = 4

[tool.ruff.lint]
preview = true
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W"]

extend-select = [
    "ANN",
    "ASYNC",
    # "BLE",
    # "FBT",
    "COM",
    # "CPY",
    # "DTZ",
    # "EM",
    "EXE",
    # "FA",
    "ISC",
    "ICN",
    "LOG",
    # "INP",
    "PIE",
    # "UP",
    "PYI",
    "PT",
    "RSE",
    # "RET",
    "SLF",
    "SLOT",
    # "SIM",
    # "TID",
    # "TC",
    "INT",
    # "ARG",
    # "PTH",
    "TD",
    "FIX",
    # "ERA",
    # "PD",
    "PGH",
    # "PL",
    # "TRY",
    # "FLY",
    "NPY",
    # "AIR",
    # "PERF",
    # "FURB",
    # "DOC",
    # "RUF",
]

ignore = ["COM812", "D203", "D211", "D212", "D213"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
